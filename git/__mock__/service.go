// Code generated by MockGen. DO NOT EDIT.
// Source: git/service.go

// Package mock_git is a generated GoMock package.
package mock_git

import (
	gomock "github.com/golang/mock/gomock"
	glow "github.com/meinto/glow"
	cmd "github.com/meinto/glow/cmd"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SetCICDOrigin mocks base method
func (m *MockService) SetCICDOrigin(origin string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCICDOrigin", origin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCICDOrigin indicates an expected call of SetCICDOrigin
func (mr *MockServiceMockRecorder) SetCICDOrigin(origin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCICDOrigin", reflect.TypeOf((*MockService)(nil).SetCICDOrigin), origin)
}

// GitRepoPath mocks base method
func (m *MockService) GitRepoPath() (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitRepoPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GitRepoPath indicates an expected call of GitRepoPath
func (mr *MockServiceMockRecorder) GitRepoPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitRepoPath", reflect.TypeOf((*MockService)(nil).GitRepoPath))
}

// CurrentBranch mocks base method
func (m *MockService) CurrentBranch() (glow.Branch, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBranch")
	ret0, _ := ret[0].(glow.Branch)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CurrentBranch indicates an expected call of CurrentBranch
func (mr *MockServiceMockRecorder) CurrentBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBranch", reflect.TypeOf((*MockService)(nil).CurrentBranch))
}

// BranchList mocks base method
func (m *MockService) BranchList() ([]glow.Branch, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BranchList")
	ret0, _ := ret[0].([]glow.Branch)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// BranchList indicates an expected call of BranchList
func (mr *MockServiceMockRecorder) BranchList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchList", reflect.TypeOf((*MockService)(nil).BranchList))
}

// Fetch mocks base method
func (m *MockService) Fetch() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch
func (mr *MockServiceMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockService)(nil).Fetch))
}

// AddAll mocks base method
func (m *MockService) AddAll() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAll")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAll indicates an expected call of AddAll
func (mr *MockServiceMockRecorder) AddAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAll", reflect.TypeOf((*MockService)(nil).AddAll))
}

// Stash mocks base method
func (m *MockService) Stash() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Stash indicates an expected call of Stash
func (mr *MockServiceMockRecorder) Stash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stash", reflect.TypeOf((*MockService)(nil).Stash))
}

// StashPop mocks base method
func (m *MockService) StashPop() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashPop")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StashPop indicates an expected call of StashPop
func (mr *MockServiceMockRecorder) StashPop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashPop", reflect.TypeOf((*MockService)(nil).StashPop))
}

// Commit mocks base method
func (m *MockService) Commit(message string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Commit indicates an expected call of Commit
func (mr *MockServiceMockRecorder) Commit(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockService)(nil).Commit), message)
}

// Push mocks base method
func (m *MockService) Push(setUpstream bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", setUpstream)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Push indicates an expected call of Push
func (mr *MockServiceMockRecorder) Push(setUpstream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockService)(nil).Push), setUpstream)
}

// Create mocks base method
func (m *MockService) Create(b glow.Branch, skipChecks bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", b, skipChecks)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(b, skipChecks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), b, skipChecks)
}

// Checkout mocks base method
func (m *MockService) Checkout(b glow.Branch) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", b)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Checkout indicates an expected call of Checkout
func (mr *MockServiceMockRecorder) Checkout(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockService)(nil).Checkout), b)
}

// CleanupBranches mocks base method
func (m *MockService) CleanupBranches(cleanupGone, cleanupUntracked bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupBranches", cleanupGone, cleanupUntracked)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CleanupBranches indicates an expected call of CleanupBranches
func (mr *MockServiceMockRecorder) CleanupBranches(cleanupGone, cleanupUntracked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupBranches", reflect.TypeOf((*MockService)(nil).CleanupBranches), cleanupGone, cleanupUntracked)
}

// CleanupTags mocks base method
func (m *MockService) CleanupTags(cleanupUntracked bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupTags", cleanupUntracked)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CleanupTags indicates an expected call of CleanupTags
func (mr *MockServiceMockRecorder) CleanupTags(cleanupUntracked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupTags", reflect.TypeOf((*MockService)(nil).CleanupTags), cleanupUntracked)
}

// RemoteBranchExists mocks base method
func (m *MockService) RemoteBranchExists(branchName string) (bool, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteBranchExists", branchName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// RemoteBranchExists indicates an expected call of RemoteBranchExists
func (mr *MockServiceMockRecorder) RemoteBranchExists(branchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteBranchExists", reflect.TypeOf((*MockService)(nil).RemoteBranchExists), branchName)
}

// MockNativeService is a mock of NativeService interface
type MockNativeService struct {
	ctrl     *gomock.Controller
	recorder *MockNativeServiceMockRecorder
}

// MockNativeServiceMockRecorder is the mock recorder for MockNativeService
type MockNativeServiceMockRecorder struct {
	mock *MockNativeService
}

// NewMockNativeService creates a new mock instance
func NewMockNativeService(ctrl *gomock.Controller) *MockNativeService {
	mock := &MockNativeService{ctrl: ctrl}
	mock.recorder = &MockNativeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNativeService) EXPECT() *MockNativeServiceMockRecorder {
	return m.recorder
}

// SetCICDOrigin mocks base method
func (m *MockNativeService) SetCICDOrigin(origin string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCICDOrigin", origin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCICDOrigin indicates an expected call of SetCICDOrigin
func (mr *MockNativeServiceMockRecorder) SetCICDOrigin(origin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCICDOrigin", reflect.TypeOf((*MockNativeService)(nil).SetCICDOrigin), origin)
}

// GitRepoPath mocks base method
func (m *MockNativeService) GitRepoPath() (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitRepoPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GitRepoPath indicates an expected call of GitRepoPath
func (mr *MockNativeServiceMockRecorder) GitRepoPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitRepoPath", reflect.TypeOf((*MockNativeService)(nil).GitRepoPath))
}

// CurrentBranch mocks base method
func (m *MockNativeService) CurrentBranch() (glow.Branch, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBranch")
	ret0, _ := ret[0].(glow.Branch)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CurrentBranch indicates an expected call of CurrentBranch
func (mr *MockNativeServiceMockRecorder) CurrentBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBranch", reflect.TypeOf((*MockNativeService)(nil).CurrentBranch))
}

// BranchList mocks base method
func (m *MockNativeService) BranchList() ([]glow.Branch, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BranchList")
	ret0, _ := ret[0].([]glow.Branch)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// BranchList indicates an expected call of BranchList
func (mr *MockNativeServiceMockRecorder) BranchList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchList", reflect.TypeOf((*MockNativeService)(nil).BranchList))
}

// Fetch mocks base method
func (m *MockNativeService) Fetch() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch
func (mr *MockNativeServiceMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockNativeService)(nil).Fetch))
}

// AddAll mocks base method
func (m *MockNativeService) AddAll() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAll")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAll indicates an expected call of AddAll
func (mr *MockNativeServiceMockRecorder) AddAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAll", reflect.TypeOf((*MockNativeService)(nil).AddAll))
}

// Stash mocks base method
func (m *MockNativeService) Stash() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Stash indicates an expected call of Stash
func (mr *MockNativeServiceMockRecorder) Stash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stash", reflect.TypeOf((*MockNativeService)(nil).Stash))
}

// StashPop mocks base method
func (m *MockNativeService) StashPop() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashPop")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StashPop indicates an expected call of StashPop
func (mr *MockNativeServiceMockRecorder) StashPop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashPop", reflect.TypeOf((*MockNativeService)(nil).StashPop))
}

// Commit mocks base method
func (m *MockNativeService) Commit(message string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Commit indicates an expected call of Commit
func (mr *MockNativeServiceMockRecorder) Commit(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockNativeService)(nil).Commit), message)
}

// Push mocks base method
func (m *MockNativeService) Push(setUpstream bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", setUpstream)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Push indicates an expected call of Push
func (mr *MockNativeServiceMockRecorder) Push(setUpstream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockNativeService)(nil).Push), setUpstream)
}

// Create mocks base method
func (m *MockNativeService) Create(b glow.Branch, skipChecks bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", b, skipChecks)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockNativeServiceMockRecorder) Create(b, skipChecks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNativeService)(nil).Create), b, skipChecks)
}

// Checkout mocks base method
func (m *MockNativeService) Checkout(b glow.Branch) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", b)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Checkout indicates an expected call of Checkout
func (mr *MockNativeServiceMockRecorder) Checkout(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockNativeService)(nil).Checkout), b)
}

// CleanupBranches mocks base method
func (m *MockNativeService) CleanupBranches(cleanupGone, cleanupUntracked bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupBranches", cleanupGone, cleanupUntracked)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CleanupBranches indicates an expected call of CleanupBranches
func (mr *MockNativeServiceMockRecorder) CleanupBranches(cleanupGone, cleanupUntracked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupBranches", reflect.TypeOf((*MockNativeService)(nil).CleanupBranches), cleanupGone, cleanupUntracked)
}

// CleanupTags mocks base method
func (m *MockNativeService) CleanupTags(cleanupUntracked bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupTags", cleanupUntracked)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CleanupTags indicates an expected call of CleanupTags
func (mr *MockNativeServiceMockRecorder) CleanupTags(cleanupUntracked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupTags", reflect.TypeOf((*MockNativeService)(nil).CleanupTags), cleanupUntracked)
}

// RemoteBranchExists mocks base method
func (m *MockNativeService) RemoteBranchExists(branchName string) (bool, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteBranchExists", branchName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// RemoteBranchExists indicates an expected call of RemoteBranchExists
func (mr *MockNativeServiceMockRecorder) RemoteBranchExists(branchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteBranchExists", reflect.TypeOf((*MockNativeService)(nil).RemoteBranchExists), branchName)
}

// CMDExecutor mocks base method
func (m *MockNativeService) CMDExecutor() cmd.CmdExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMDExecutor")
	ret0, _ := ret[0].(cmd.CmdExecutor)
	return ret0
}

// CMDExecutor indicates an expected call of CMDExecutor
func (mr *MockNativeServiceMockRecorder) CMDExecutor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMDExecutor", reflect.TypeOf((*MockNativeService)(nil).CMDExecutor))
}
