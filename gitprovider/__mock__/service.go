// Code generated by MockGen. DO NOT EDIT.
// Source: gitprovider/service.go

// Package mock_gitprovider is a generated GoMock package.
package mock_gitprovider

import (
	gomock "github.com/golang/mock/gomock"
	glow "github.com/meinto/glow"
	git "github.com/meinto/glow/git"
	gitprovider "github.com/meinto/glow/gitprovider"
	http "net/http"
	reflect "reflect"
)

// MockHttpClient is a mock of HttpClient interface
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClient)(nil).Do), req)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GitService mocks base method
func (m *MockService) GitService() git.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitService")
	ret0, _ := ret[0].(git.Service)
	return ret0
}

// GitService indicates an expected call of GitService
func (mr *MockServiceMockRecorder) GitService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitService", reflect.TypeOf((*MockService)(nil).GitService))
}

// HTTPClient mocks base method
func (m *MockService) HTTPClient() gitprovider.HttpClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(gitprovider.HttpClient)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient
func (mr *MockServiceMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockService)(nil).HTTPClient))
}

// SetHTTPClient mocks base method
func (m *MockService) SetHTTPClient(arg0 gitprovider.HttpClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTTPClient", arg0)
}

// SetHTTPClient indicates an expected call of SetHTTPClient
func (mr *MockServiceMockRecorder) SetHTTPClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTTPClient", reflect.TypeOf((*MockService)(nil).SetHTTPClient), arg0)
}

// SetGitService mocks base method
func (m *MockService) SetGitService(arg0 git.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGitService", arg0)
}

// SetGitService indicates an expected call of SetGitService
func (mr *MockServiceMockRecorder) SetGitService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGitService", reflect.TypeOf((*MockService)(nil).SetGitService), arg0)
}

// Close mocks base method
func (m *MockService) Close(b glow.Branch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockServiceMockRecorder) Close(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close), b)
}

// Publish mocks base method
func (m *MockService) Publish(b glow.Branch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockServiceMockRecorder) Publish(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockService)(nil).Publish), b)
}

// DetectCICDOrigin mocks base method
func (m *MockService) DetectCICDOrigin() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCICDOrigin")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCICDOrigin indicates an expected call of DetectCICDOrigin
func (mr *MockServiceMockRecorder) DetectCICDOrigin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCICDOrigin", reflect.TypeOf((*MockService)(nil).DetectCICDOrigin))
}

// GetCIBranch mocks base method
func (m *MockService) GetCIBranch() (glow.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCIBranch")
	ret0, _ := ret[0].(glow.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCIBranch indicates an expected call of GetCIBranch
func (mr *MockServiceMockRecorder) GetCIBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCIBranch", reflect.TypeOf((*MockService)(nil).GetCIBranch))
}
