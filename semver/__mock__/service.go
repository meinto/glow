// Code generated by MockGen. DO NOT EDIT.
// Source: semver/service.go

// Package mock_semver is a generated GoMock package.
package mock_semver

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetCurrentVersion mocks base method
func (m *MockService) GetCurrentVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentVersion indicates an expected call of GetCurrentVersion
func (mr *MockServiceMockRecorder) GetCurrentVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersion", reflect.TypeOf((*MockService)(nil).GetCurrentVersion))
}

// GetNextVersion mocks base method
func (m *MockService) GetNextVersion(versionType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextVersion", versionType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextVersion indicates an expected call of GetNextVersion
func (mr *MockServiceMockRecorder) GetNextVersion(versionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextVersion", reflect.TypeOf((*MockService)(nil).GetNextVersion), versionType)
}

// SetNextVersion mocks base method
func (m *MockService) SetNextVersion(versionType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextVersion", versionType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNextVersion indicates an expected call of SetNextVersion
func (mr *MockServiceMockRecorder) SetNextVersion(versionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextVersion", reflect.TypeOf((*MockService)(nil).SetNextVersion), versionType)
}

// SetVersion mocks base method
func (m *MockService) SetVersion(version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVersion indicates an expected call of SetVersion
func (mr *MockServiceMockRecorder) SetVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockService)(nil).SetVersion), version)
}

// TagCurrentVersion mocks base method
func (m *MockService) TagCurrentVersion() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCurrentVersion")
	ret0, _ := ret[0].(error)
	return ret0
}

// TagCurrentVersion indicates an expected call of TagCurrentVersion
func (mr *MockServiceMockRecorder) TagCurrentVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCurrentVersion", reflect.TypeOf((*MockService)(nil).TagCurrentVersion))
}
