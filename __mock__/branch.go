// Code generated by MockGen. DO NOT EDIT.
// Source: branch.go

// Package mock_glow is a generated GoMock package.
package mock_glow

import (
	gomock "github.com/golang/mock/gomock"
	glow "github.com/meinto/glow"
	reflect "reflect"
)

// MockBranch is a mock of Branch interface
type MockBranch struct {
	ctrl     *gomock.Controller
	recorder *MockBranchMockRecorder
}

// MockBranchMockRecorder is the mock recorder for MockBranch
type MockBranchMockRecorder struct {
	mock *MockBranch
}

// NewMockBranch creates a new mock instance
func NewMockBranch(ctrl *gomock.Controller) *MockBranch {
	mock := &MockBranch{ctrl: ctrl}
	mock.recorder = &MockBranchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBranch) EXPECT() *MockBranchMockRecorder {
	return m.recorder
}

// CreationIsAllowedFrom mocks base method
func (m *MockBranch) CreationIsAllowedFrom(sourceBranch glow.Branch) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreationIsAllowedFrom", sourceBranch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreationIsAllowedFrom indicates an expected call of CreationIsAllowedFrom
func (mr *MockBranchMockRecorder) CreationIsAllowedFrom(sourceBranch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreationIsAllowedFrom", reflect.TypeOf((*MockBranch)(nil).CreationIsAllowedFrom), sourceBranch)
}

// CanBeClosed mocks base method
func (m *MockBranch) CanBeClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanBeClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanBeClosed indicates an expected call of CanBeClosed
func (mr *MockBranchMockRecorder) CanBeClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanBeClosed", reflect.TypeOf((*MockBranch)(nil).CanBeClosed))
}

// CanBePublished mocks base method
func (m *MockBranch) CanBePublished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanBePublished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanBePublished indicates an expected call of CanBePublished
func (mr *MockBranchMockRecorder) CanBePublished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanBePublished", reflect.TypeOf((*MockBranch)(nil).CanBePublished))
}

// CloseBranches mocks base method
func (m *MockBranch) CloseBranches(availableBranches []glow.Branch) []glow.Branch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBranches", availableBranches)
	ret0, _ := ret[0].([]glow.Branch)
	return ret0
}

// CloseBranches indicates an expected call of CloseBranches
func (mr *MockBranchMockRecorder) CloseBranches(availableBranches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBranches", reflect.TypeOf((*MockBranch)(nil).CloseBranches), availableBranches)
}

// PublishBranch mocks base method
func (m *MockBranch) PublishBranch() glow.Branch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBranch")
	ret0, _ := ret[0].(glow.Branch)
	return ret0
}

// PublishBranch indicates an expected call of PublishBranch
func (mr *MockBranchMockRecorder) PublishBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBranch", reflect.TypeOf((*MockBranch)(nil).PublishBranch))
}

// BranchName mocks base method
func (m *MockBranch) BranchName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BranchName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BranchName indicates an expected call of BranchName
func (mr *MockBranchMockRecorder) BranchName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchName", reflect.TypeOf((*MockBranch)(nil).BranchName))
}

// ShortBranchName mocks base method
func (m *MockBranch) ShortBranchName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortBranchName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShortBranchName indicates an expected call of ShortBranchName
func (mr *MockBranchMockRecorder) ShortBranchName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortBranchName", reflect.TypeOf((*MockBranch)(nil).ShortBranchName))
}

// MockAuthoredBranch is a mock of AuthoredBranch interface
type MockAuthoredBranch struct {
	ctrl     *gomock.Controller
	recorder *MockAuthoredBranchMockRecorder
}

// MockAuthoredBranchMockRecorder is the mock recorder for MockAuthoredBranch
type MockAuthoredBranchMockRecorder struct {
	mock *MockAuthoredBranch
}

// NewMockAuthoredBranch creates a new mock instance
func NewMockAuthoredBranch(ctrl *gomock.Controller) *MockAuthoredBranch {
	mock := &MockAuthoredBranch{ctrl: ctrl}
	mock.recorder = &MockAuthoredBranchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthoredBranch) EXPECT() *MockAuthoredBranchMockRecorder {
	return m.recorder
}

// CreationIsAllowedFrom mocks base method
func (m *MockAuthoredBranch) CreationIsAllowedFrom(sourceBranch glow.Branch) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreationIsAllowedFrom", sourceBranch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreationIsAllowedFrom indicates an expected call of CreationIsAllowedFrom
func (mr *MockAuthoredBranchMockRecorder) CreationIsAllowedFrom(sourceBranch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreationIsAllowedFrom", reflect.TypeOf((*MockAuthoredBranch)(nil).CreationIsAllowedFrom), sourceBranch)
}

// CanBeClosed mocks base method
func (m *MockAuthoredBranch) CanBeClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanBeClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanBeClosed indicates an expected call of CanBeClosed
func (mr *MockAuthoredBranchMockRecorder) CanBeClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanBeClosed", reflect.TypeOf((*MockAuthoredBranch)(nil).CanBeClosed))
}

// CanBePublished mocks base method
func (m *MockAuthoredBranch) CanBePublished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanBePublished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanBePublished indicates an expected call of CanBePublished
func (mr *MockAuthoredBranchMockRecorder) CanBePublished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanBePublished", reflect.TypeOf((*MockAuthoredBranch)(nil).CanBePublished))
}

// CloseBranches mocks base method
func (m *MockAuthoredBranch) CloseBranches(availableBranches []glow.Branch) []glow.Branch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBranches", availableBranches)
	ret0, _ := ret[0].([]glow.Branch)
	return ret0
}

// CloseBranches indicates an expected call of CloseBranches
func (mr *MockAuthoredBranchMockRecorder) CloseBranches(availableBranches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBranches", reflect.TypeOf((*MockAuthoredBranch)(nil).CloseBranches), availableBranches)
}

// PublishBranch mocks base method
func (m *MockAuthoredBranch) PublishBranch() glow.Branch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBranch")
	ret0, _ := ret[0].(glow.Branch)
	return ret0
}

// PublishBranch indicates an expected call of PublishBranch
func (mr *MockAuthoredBranchMockRecorder) PublishBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBranch", reflect.TypeOf((*MockAuthoredBranch)(nil).PublishBranch))
}

// BranchName mocks base method
func (m *MockAuthoredBranch) BranchName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BranchName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BranchName indicates an expected call of BranchName
func (mr *MockAuthoredBranchMockRecorder) BranchName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchName", reflect.TypeOf((*MockAuthoredBranch)(nil).BranchName))
}

// ShortBranchName mocks base method
func (m *MockAuthoredBranch) ShortBranchName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortBranchName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShortBranchName indicates an expected call of ShortBranchName
func (mr *MockAuthoredBranchMockRecorder) ShortBranchName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortBranchName", reflect.TypeOf((*MockAuthoredBranch)(nil).ShortBranchName))
}
